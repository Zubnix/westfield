<?xml version="1.0" encoding="UTF-8"?>
<protocol name="web_shm">
    <copyright>
        Copyright Â© 2019 Erik De Rijcke

        Permission is hereby granted, free of charge, to any person
        obtaining a copy of this software and associated documentation files
        (the "Software"), to deal in the Software without restriction,
        including without limitation the rights to use, copy, modify, merge,
        publish, distribute, sublicense, and/or sell copies of the Software,
        and to permit persons to whom the Software is furnished to do so,
        subject to the following conditions:

        The above copyright notice and this permission notice (including the
        next paragraph) shall be included in all copies or substantial
        portions of the Software.

        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
        EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
        MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
        NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
        BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
        ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
        CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
    </copyright>

    <interface name="web_array_buffer" version="1">
        <request name="attach">
            <description summary="attach">
                Attaches the associated HTML5 array buffer to the compositor. The array buffer should be the same
                object as the one used to create this buffer. No action is expected for this request. It merely
                functions as a HTML5 array buffer ownership transfer from web-worker to main thread.
            </description>
            <arg name="array_buffer" type="fd" summary="HTML5 array buffer to attach to the compositor."/>
        </request>
        <event name="detach">
            <description summary="detach">
                Detaches the associated HTML5 array buffer from the compositor and returns it to the client.
                No action is expected for this event. It merely functions as a HTML5 array buffer ownership
                transfer from main thread to web-worker.
            </description>
            <arg name="array_buffer" type="fd" summary="HTML5 array buffer to detach from the compositor"/>
        </event>
    </interface>

    <interface name="web_shm" version="1">
        <description summary="shared memory support">
            A singleton global object that provides support for shared
            memory.

            Clients can create wl_buffer objects using the create_buffer
            request.

            At connection setup time, the web_shm object emits one or more
            format events to inform clients about the valid pixel formats
            that can be used for buffers.
        </description>

        <enum name="error">
            <description summary="web_shm error values">
                These errors can be emitted in response to web_shm requests.
            </description>
            <entry name="invalid_format" value="0" summary="buffer format is not known"/>
            <entry name="invalid_stride" value="1" summary="invalid size or stride during pool or buffer creation"/>
        </enum>

        <enum name="format">
            <description summary="pixel formats">
                This describes the memory layout of an individual pixel.

                All renderers should support argb8888 and xrgb8888 but any other
                formats are optional and may not be supported by the particular
                renderer in use.

                The drm format codes match the macros defined in drm_fourcc.h.
                The formats actually supported by the compositor will be
                reported by the format event.
            </description>
            <entry name="argb8888" value="0" summary="32-bit ARGB format, [31:0] A:R:G:B 8:8:8:8 little endian"/>
            <entry name="xrgb8888" value="1" summary="32-bit RGB format, [31:0] x:R:G:B 8:8:8:8 little endian"/>
            <entry name="c8" value="0x20203843" summary="8-bit color index format, [7:0] C"/>
            <entry name="rgb332" value="0x38424752" summary="8-bit RGB format, [7:0] R:G:B 3:3:2"/>
            <entry name="bgr233" value="0x38524742" summary="8-bit BGR format, [7:0] B:G:R 2:3:3"/>
            <entry name="xrgb4444" value="0x32315258"
                   summary="16-bit xRGB format, [15:0] x:R:G:B 4:4:4:4 little endian"/>
            <entry name="xbgr4444" value="0x32314258"
                   summary="16-bit xBGR format, [15:0] x:B:G:R 4:4:4:4 little endian"/>
            <entry name="rgbx4444" value="0x32315852"
                   summary="16-bit RGBx format, [15:0] R:G:B:x 4:4:4:4 little endian"/>
            <entry name="bgrx4444" value="0x32315842"
                   summary="16-bit BGRx format, [15:0] B:G:R:x 4:4:4:4 little endian"/>
            <entry name="argb4444" value="0x32315241"
                   summary="16-bit ARGB format, [15:0] A:R:G:B 4:4:4:4 little endian"/>
            <entry name="abgr4444" value="0x32314241"
                   summary="16-bit ABGR format, [15:0] A:B:G:R 4:4:4:4 little endian"/>
            <entry name="rgba4444" value="0x32314152"
                   summary="16-bit RBGA format, [15:0] R:G:B:A 4:4:4:4 little endian"/>
            <entry name="bgra4444" value="0x32314142"
                   summary="16-bit BGRA format, [15:0] B:G:R:A 4:4:4:4 little endian"/>
            <entry name="xrgb1555" value="0x35315258"
                   summary="16-bit xRGB format, [15:0] x:R:G:B 1:5:5:5 little endian"/>
            <entry name="xbgr1555" value="0x35314258"
                   summary="16-bit xBGR 1555 format, [15:0] x:B:G:R 1:5:5:5 little endian"/>
            <entry name="rgbx5551" value="0x35315852"
                   summary="16-bit RGBx 5551 format, [15:0] R:G:B:x 5:5:5:1 little endian"/>
            <entry name="bgrx5551" value="0x35315842"
                   summary="16-bit BGRx 5551 format, [15:0] B:G:R:x 5:5:5:1 little endian"/>
            <entry name="argb1555" value="0x35315241"
                   summary="16-bit ARGB 1555 format, [15:0] A:R:G:B 1:5:5:5 little endian"/>
            <entry name="abgr1555" value="0x35314241"
                   summary="16-bit ABGR 1555 format, [15:0] A:B:G:R 1:5:5:5 little endian"/>
            <entry name="rgba5551" value="0x35314152"
                   summary="16-bit RGBA 5551 format, [15:0] R:G:B:A 5:5:5:1 little endian"/>
            <entry name="bgra5551" value="0x35314142"
                   summary="16-bit BGRA 5551 format, [15:0] B:G:R:A 5:5:5:1 little endian"/>
            <entry name="rgb565" value="0x36314752" summary="16-bit RGB 565 format, [15:0] R:G:B 5:6:5 little endian"/>
            <entry name="bgr565" value="0x36314742" summary="16-bit BGR 565 format, [15:0] B:G:R 5:6:5 little endian"/>
            <entry name="rgb888" value="0x34324752" summary="24-bit RGB format, [23:0] R:G:B little endian"/>
            <entry name="bgr888" value="0x34324742" summary="24-bit BGR format, [23:0] B:G:R little endian"/>
            <entry name="xbgr8888" value="0x34324258"
                   summary="32-bit xBGR format, [31:0] x:B:G:R 8:8:8:8 little endian"/>
            <entry name="rgbx8888" value="0x34325852"
                   summary="32-bit RGBx format, [31:0] R:G:B:x 8:8:8:8 little endian"/>
            <entry name="bgrx8888" value="0x34325842"
                   summary="32-bit BGRx format, [31:0] B:G:R:x 8:8:8:8 little endian"/>
            <entry name="abgr8888" value="0x34324241"
                   summary="32-bit ABGR format, [31:0] A:B:G:R 8:8:8:8 little endian"/>
            <entry name="rgba8888" value="0x34324152"
                   summary="32-bit RGBA format, [31:0] R:G:B:A 8:8:8:8 little endian"/>
            <entry name="bgra8888" value="0x34324142"
                   summary="32-bit BGRA format, [31:0] B:G:R:A 8:8:8:8 little endian"/>
            <entry name="xrgb2101010" value="0x30335258"
                   summary="32-bit xRGB format, [31:0] x:R:G:B 2:10:10:10 little endian"/>
            <entry name="xbgr2101010" value="0x30334258"
                   summary="32-bit xBGR format, [31:0] x:B:G:R 2:10:10:10 little endian"/>
            <entry name="rgbx1010102" value="0x30335852"
                   summary="32-bit RGBx format, [31:0] R:G:B:x 10:10:10:2 little endian"/>
            <entry name="bgrx1010102" value="0x30335842"
                   summary="32-bit BGRx format, [31:0] B:G:R:x 10:10:10:2 little endian"/>
            <entry name="argb2101010" value="0x30335241"
                   summary="32-bit ARGB format, [31:0] A:R:G:B 2:10:10:10 little endian"/>
            <entry name="abgr2101010" value="0x30334241"
                   summary="32-bit ABGR format, [31:0] A:B:G:R 2:10:10:10 little endian"/>
            <entry name="rgba1010102" value="0x30334152"
                   summary="32-bit RGBA format, [31:0] R:G:B:A 10:10:10:2 little endian"/>
            <entry name="bgra1010102" value="0x30334142"
                   summary="32-bit BGRA format, [31:0] B:G:R:A 10:10:10:2 little endian"/>
            <entry name="yuyv" value="0x56595559"
                   summary="packed YCbCr format, [31:0] Cr0:Y1:Cb0:Y0 8:8:8:8 little endian"/>
            <entry name="yvyu" value="0x55595659"
                   summary="packed YCbCr format, [31:0] Cb0:Y1:Cr0:Y0 8:8:8:8 little endian"/>
            <entry name="uyvy" value="0x59565955"
                   summary="packed YCbCr format, [31:0] Y1:Cr0:Y0:Cb0 8:8:8:8 little endian"/>
            <entry name="vyuy" value="0x59555956"
                   summary="packed YCbCr format, [31:0] Y1:Cb0:Y0:Cr0 8:8:8:8 little endian"/>
            <entry name="ayuv" value="0x56555941"
                   summary="packed AYCbCr format, [31:0] A:Y:Cb:Cr 8:8:8:8 little endian"/>
            <entry name="nv12" value="0x3231564e" summary="2 plane YCbCr Cr:Cb format, 2x2 subsampled Cr:Cb plane"/>
            <entry name="nv21" value="0x3132564e" summary="2 plane YCbCr Cb:Cr format, 2x2 subsampled Cb:Cr plane"/>
            <entry name="nv16" value="0x3631564e" summary="2 plane YCbCr Cr:Cb format, 2x1 subsampled Cr:Cb plane"/>
            <entry name="nv61" value="0x3136564e" summary="2 plane YCbCr Cb:Cr format, 2x1 subsampled Cb:Cr plane"/>
            <entry name="yuv410" value="0x39565559"
                   summary="3 plane YCbCr format, 4x4 subsampled Cb (1) and Cr (2) planes"/>
            <entry name="yvu410" value="0x39555659"
                   summary="3 plane YCbCr format, 4x4 subsampled Cr (1) and Cb (2) planes"/>
            <entry name="yuv411" value="0x31315559"
                   summary="3 plane YCbCr format, 4x1 subsampled Cb (1) and Cr (2) planes"/>
            <entry name="yvu411" value="0x31315659"
                   summary="3 plane YCbCr format, 4x1 subsampled Cr (1) and Cb (2) planes"/>
            <entry name="yuv420" value="0x32315559"
                   summary="3 plane YCbCr format, 2x2 subsampled Cb (1) and Cr (2) planes"/>
            <entry name="yvu420" value="0x32315659"
                   summary="3 plane YCbCr format, 2x2 subsampled Cr (1) and Cb (2) planes"/>
            <entry name="yuv422" value="0x36315559"
                   summary="3 plane YCbCr format, 2x1 subsampled Cb (1) and Cr (2) planes"/>
            <entry name="yvu422" value="0x36315659"
                   summary="3 plane YCbCr format, 2x1 subsampled Cr (1) and Cb (2) planes"/>
            <entry name="yuv444" value="0x34325559"
                   summary="3 plane YCbCr format, non-subsampled Cb (1) and Cr (2) planes"/>
            <entry name="yvu444" value="0x34325659"
                   summary="3 plane YCbCr format, non-subsampled Cr (1) and Cb (2) planes"/>
        </enum>

        <request name="create_web_array_buffer">
            <description summary="create an HTML5 array buffer">
                Create a web_array_buffer object.

                The buffer is created using an HTML5 array buffer as the fd argument
                and width and height as specified. The stride argument specifies
                the number of bytes from the beginning of one row to the beginning
                of the next. The format is the pixel format of the buffer and
                must be one of those advertised through the web_shm.format event.

                Creating a buffer with an HTML5 array buffer as the fd argument
                will attach the array buffer to the compositor and as such it can not be used
                by the client until the compositor detaches it. As such clients should
                wait for the compositor to emit the web_array_buffer detach event
                before using the array buffer again.

                A compositor will emit the detach event in conjunction with a wl_buffer release event.
                Clients should therefore only create a web_array_buffer after all data is written to
                the HTML5 array buffer, after which it should be immediately attach+commit to a surface.
            </description>
            <arg name="id" type="new_id" interface="web_array_buffer" summary="array buffer to create"/>
            <arg name="array_buffer" type="fd" summary="file descriptor for shared memory of the buffer"/>
            <arg name="width" type="int" summary="buffer width, in pixels"/>
            <arg name="height" type="int" summary="buffer height, in pixels"/>
            <arg name="stride" type="int"
                 summary="number of bytes from the beginning of one row to the beginning of the next row"/>
            <arg name="format" type="uint" enum="web_shm.format" summary="buffer pixel format"/>
        </request>

        <request name="create_buffer">
            <description summary="create a buffer">
                Create a wl_buffer object from a web_array_buffer so it can be used with a surface.
            </description>
            <arg name="id" type="new_id" interface="wl_buffer" summary="buffer to create"/>
            <arg name="web_array_buffer" type="object" interface="web_array_buffer" summary="web_array_buffer to wrap"/>
        </request>

        <event name="format">
            <description summary="pixel format description">
                Informs the client about a valid pixel format that
                can be used for buffers. Known formats include
                argb8888 and xrgb8888.
            </description>
            <arg name="format" type="uint" enum="format" summary="buffer pixel format"/>
        </event>
    </interface>
</protocol>